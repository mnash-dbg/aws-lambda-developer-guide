AWSTemplateFormatVersion: 2010-09-09
Parameters:
  eipAllocationId:
    Description: Elastic IP allocation ID
    Type: String
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.0.0.0/16'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.0.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.0.128.0/20'
      VpcId: !Ref VPC
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.0.16.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.0.144.0/20'
      VpcId: !Ref VPC
  RouteTableAPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableBPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableBPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTableAPublic
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTableAPrivate
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTableBPublic
  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTableBPrivate
  RouteTablePublicAInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicBInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  # EIPA:
  #   Type: 'AWS::EC2::EIP'
  #   Properties:
  #     Domain: vpc
  # EIPB:
  #   Type: 'AWS::EC2::EIP'
  #   Properties:
  #     Domain: vpc
  # NatGatewayA:
  #   Type: 'AWS::EC2::NatGateway'
  #   Properties:
  #     AllocationId: !GetAtt 'EIPA.AllocationId'
  #     SubnetId: !Ref SubnetAPublic
  RouteA:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableAPrivate
      DestinationCidrBlock: '0.0.0.0/0'
      # NatGatewayId: !Ref NatGatewayA
      GatewayId: !Ref InternetGateway
  # NatGatewayB:
  #   Type: 'AWS::EC2::NatGateway'
  #   Properties:
  #     AllocationId: !GetAtt 'EIPB.AllocationId'
  #     SubnetId: !Ref SubnetBPublic
  RouteB:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableBPrivate
      DestinationCidrBlock: '0.0.0.0/0'
      # NatGatewayId: !Ref NatGatewayB
      GatewayId: !Ref InternetGateway
  NatGatewayLambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'Security group for NAT Gateway Lambda'
  fileSystem:
    Type: AWS::EFS::FileSystem
  mountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref fileSystem
      SubnetId: !Ref SubnetAPrivate
      SecurityGroups:
        - !GetAtt VPC.DefaultSecurityGroup
  mountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref fileSystem
      SubnetId: !Ref SubnetBPrivate
      SecurityGroups:
        - !GetAtt VPC.DefaultSecurityGroup
  accessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref fileSystem
      PosixUser:
        Uid: "1001"
        Gid: "1001"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "755"
        Path: "/efs-nodejs-storage"
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-bucket
Outputs:
  VPCSecurityGroup:
    Description: Default security for Lambda VPC
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName","vpc-sg"]]
  SubnetAPrivate:
    Description: The ID of private subnet one created
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName","subnet-a"]]
  SubnetBPrivate:
    Description: The ID of private subnet two created
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName","subnet-b"]]
  accessPointArn:
    Description: Access point ARN
    Value: !GetAtt accessPoint.Arn
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName","accesspoint"]]
  S3Bucket:
    Description: S3 Bucket name
    Value: !Ref S3Bucket
